Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра «Програмна інженерія»





Звіт 
до практичного заняття №1 з дисципліни
«Архітектура програмного забезпечення»
На тему: «Патерни проєктування»





Виконала:                                                                         Перевірив:
ст. гр. ПЗПІ-22-10                                                            ст. викладач кафедри ПІ 
Ірина Єгошина Сергіївна                                                Сокорчук Ігор Петрович









Харків 2025
	Історія змін:
№ДатаВерсія звітуОпис змін та виправлень131.03.20250.1Створено розділи: «Завдання», «Хід роботи», «Висновки», а також додатки Б та В201.04.20250.2Додано додаток А та змінено розділ «Висновки»	
	Завдання:
   1. Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ» (із книг: Ґамма, “ООП. Патерни проєктування”, GoF, крім патерна Singletone)
   2. Створити та оформити слайди презентації доповіді
   3. Створити та опублікувати на YouTube відеозапис доповіді
   4. Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
   5. При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
   6. Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
   7. Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
   8. Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
   9. Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1.

	Хід роботи:
	Було обрано тему «Шаблон Abstract Factory проєктування ПЗ». У презентації (Додаток Б) наведено пояснення щодо структури і принципів патерну і надано приклади реалізації на C#.

	Висновки:
	Набуто навичок проектування за патерном Abstract Factory, розглянуто приклад практичної реалізації на C#.
 
ДОДАТОК А
Відеозапис доповіді на YouTube: https://youtu.be/_VPeA_Y9qpE
0:00 Вступ
0:18 Ознайомлення з поняттям Abstract factory
1:13 Коли використовується патерн Abstract factory
1:51 Візуалізація роботи патерну
2:52 Приклад з повсякденного життя
4:43 Приклад з проектом (з кодом на C#)
7:37 Висновки
8:14 Список джерел

ДОДАТОК Б

Рисунок Б.1 – Слайд-титулка

Рисунок Б.2 – Слайд-пояснення терміну

Рисунок Б.3 – Слайд-рецензія на визначення терміну

Рисунок Б.4 – Слайд з передумовами використання патерну «Abstract Factory»

Рисунок Б.5 – Слайд-візуалізація роботи патерну «Abstract Factory»

Рисунок Б.6 – Слайд-візуалізація структури патерну «Abstract Factory»

Рисунок Б.7 – Слайд-приклад застосування патерну «Abstract Factory»

Рисунок Б.8 – Слайд-приклад застосування патерну «Abstract Factory»

Рисунок Б.9 – Слайд-приклад застосування патерну «Abstract Factory» в рамках проекту

Рисунок Б.10 – Слайд з прикладом кода на C# з поступовою реалізацією «абстрактної фабрики»

Рисунок Б.11 – Слайд з прикладом кода на C# з поступовою реалізацією «абстрактної фабрики»

Рисунок Б.12 – Слайд з прикладом кода на C# з поступовою реалізацією «абстрактної фабрики»

Рисунок Б.13 – Слайд з висновками стосовно використання «абстрактної фабрики» у проектах

Рисунок Б.14 – Слайд зі списком джерел

Рисунок Б.15 – Слайд-подяка


ДОДАТОК В
Файл « abstractFactory.cs»
1 // Абстрактный продукт - сенсор
2 public interface ISensor
3 {
4     void ReadData();
5 }
6 
7 // Сенсор температури
8 public class TemperatureSensor : ISensor
9 {
10     public void ReadData()
11     {
12         Console.WriteLine("Зчитування температури...");
13     }
14 }
15 
16 // Сенсор вологості
17 public class HumiditySensor : ISensor
18 {
19     public void ReadData()
20     {
21         Console.WriteLine("Зчитування вологості...");
22     }
23 }
24 
25 // Сенсор напруги
26 public class VoltageSensor : ISensor
27 {
28     public void ReadData()
29     {
30         Console.WriteLine("Зчитування напруги...");
31     }
32 }
33 
34 
35 // Абстрактна фабрика сенсорів
36 public interface ISensorFactory
37 {
38     ISensor CreateTemperatureSensor();
39     ISensor CreateHumiditySensor();
40     ISensor CreateVoltageSensor();
41 }
42 
43 // Фабрика сенсорів першого виробника (А)
44 public class ManufacturerAFactory : ISensorFactory
45 {
46     public ISensor CreateTemperatureSensor()
47     {
48         return new TemperatureSensor();
49     }
50     
51     public ISensor CreateHumiditySensor()
52     {
53         return new HumiditySensor();
54     }
55     
56     public ISensor CreateVoltageSensor()
57     {
58         return new VoltageSensor();
59     }
60 }
61 
62 // Фабрика сенсорів другого виробника (В)
63 public class ManufacturerBFactory : ISensorFactory
64 {
65     public ISensor CreateTemperatureSensor()
66     {
67         return new TemperatureSensor();
68     }
69     
70     public ISensor CreateHumiditySensor()
71     {
72         return new HumiditySensor();
73     }
74     
75     public ISensor CreateVoltageSensor()
76     {
77         return new VoltageSensor();
78     }
79 }
80 
81 // Використання в коді
82 public class SensorSystem
83 {
84     private readonly ISensor _temperatureSensor;
85     private readonly ISensor _humiditySensor;
86     private readonly ISensor _voltageSensor;
87 
88     public SensorSystem(ISensorFactory factory)
89     {
90         _temperatureSensor = factory.CreateTemperatureSensor();
91         _humiditySensor = factory.CreateHumiditySensor();
92         _voltageSensor = factory.CreateVoltageSensor();
93     }
94 
95     public void ReadAllSensors()
96     {
97         _temperatureSensor.ReadData();
98         _humiditySensor.ReadData();
99         _voltageSensor.ReadData();
100     }
101 }
102 
103 class Program
104 {
105     static void Main()
106     {
107         ISensorFactory factory;
108         
109         Console.WriteLine("Оберіть виробника сенсорів: A чи B");
110         string userChoice = Console.ReadLine().ToLower();
111         
112         if (userChoice == "a")
113         {
114             factory = new ManufacturerAFactory();
115         }
116         else
117         {
118             factory = new ManufacturerBFactory();
119         }
120         
121         SensorSystem system = new SensorSystem(factory);
122         system.ReadAllSensors();
123     }
124 }


