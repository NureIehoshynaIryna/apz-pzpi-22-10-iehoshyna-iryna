Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра комп’ютерних наук







Звіт 
з лабораторної роботи №3
з предмету «Архітектура програмного забезпечення»






Виконала:                                                                              Перевірив:
ст. гр. ПЗПІ-22-10                                                                Дашенков Д. С. 
Ірина Єгошина 







Харків 2025
	Мета
	Створення Web застосунку. 
	Хід роботи
	Назва: «Програмна система для моніторінгу стану електроних пристроїв» HardMon.

	При створенні Web застосунку на Vue було прийнято ряд інженерних рішень щодо архітектури, структури взаємодії з API та обробки даних:
   • Архітектура клієнт-сервер: Застосунок побудовано за моделлю клієнт-сервер. Frontend реалізовано на Vue.js, а backend — на.NET. Це забезпечує масштабованість, розділення відповідальностей та гнучкість при розвитку системи.
   • Авторизація через cookies: Для ідентифікації користувача реалізовано ручне збереження cookies після логіну. Це дозволяє підтримувати сесії та безпеку взаємодії.
   • Використання REST API: Усі взаємодії між frontend і backend реалізовані через REST API. Це дає змогу легко тестувати, розширювати та інтегрувати систему.
   • Vuex Store для централізованого управління станом: Дані та API-запити обробляються через Vuex, що забезпечує уніфікований підхід до управління станом додатку.
   • Локалізація: Реалізовано підтримку багатомовності (англійська та українська) через vue-i18n. Це дозволяє масштабувати застосунок для користувачів із різних регіонів.
   • Адміністративна панель: Окремий інтерфейс доступний лише для системних адміністраторів (через роль isSysAdmin), що дозволяє: переглядати та управляти усіма акаунтами; бачити глобальну інформацію про пристрої та користувачів; мати доступ до інтерфейсів, які недоступні звичайним користувачам. Це забезпечує чітке розділення ролей та контроль над системою на рівні адміністрації.
	Далі наведено діаграми, які допоможуть зрозуміти архітектуру застосунку краще.
	UML-діаграма прецедентів (Use Case Diagram) - діаграма, яка допомагає краще зрозуміти, які основні дії можуть виконувати різні типи користувачів у системі.

Рисунок 1 - UML-діаграма прецедентів (Use Case Diagram)

	Component Diagram (Діаграма компонентів) - діаграма, яка показує архітектуру програмного забезпечення з точки зору логічних частин і взаємодії між ними. Вона дозволяє зрозуміти, як пов’язані фронтенд та бекенд частини застосунку, і через які шари (Vuex, API, сервіси, репозиторії) відбувається обробка запитів і даних.

Рисунок 2 - Component Diagram (Діаграма компонентів)

	Interaction Overview Diagram (Діаграма огляду взаємодії) - це діаграма, яка демонструє послідовність взаємодії користувача із системою. Вона допомагає відслідкувати основні сценарії роботи користувача — від авторизації до керування ресурсами, включаючи гілку логіки для адміністратора. Це дозволяє чітко побачити потік даних і логіку переходів між станами інтерфейсу.

Рисунок 3 - Interaction Overview Diagram (Діаграма огляду взаємодії)
	State Diagram (Діаграма станів) - діаграма, яка ілюструє зміну стану користувача залежно від його дій (вхід, вихід, доступ до адміністративної панелі тощо). 

Рисунок 4 - State Diagram (Діаграма станів)


Рисунок 5 - Приклад роботи застосунку 

Рисунок 6 - Приклад роботи застосунку 

Рисунок 7 - Приклад роботи застосунку 





